import numpy as np 
import cv2
import os
 # File to Depth tunning the images
 # Right know we are using the rectified images
 # Not the ones generated by using the stereo camera
 

def nothing(x):
    pass
 
def main():

    ## Get the images
    root_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
    DATASET_PATH = root_path +"\\data\\rectified\\originals"
    left_images_path =  DATASET_PATH + "/seq_1/image_02/data/0000000000.png"
    right_images_path = DATASET_PATH + "/seq_1/image_03/data/0000000000.png"

    print(left_images_path)

    cv2.namedWindow('disp', cv2.WINDOW_KEEPRATIO)
    #cv2.resizeWindow('disp',800,800)
    
    cv2.createTrackbar('minDisparity','disp',5,25,nothing)
    cv2.createTrackbar('numDisparities','disp',1,17,nothing)
    cv2.createTrackbar('blockSize','disp',5,50,nothing)
    cv2.createTrackbar('preFilterType','disp',1,1,nothing)
    cv2.createTrackbar('preFilterSize','disp',2,25,nothing)
    cv2.createTrackbar('preFilterCap','disp',5,62,nothing)
    cv2.createTrackbar('textureThreshold','disp',10,100,nothing)
    cv2.createTrackbar('disp12MaxDiff','disp',0,500,nothing)
    cv2.createTrackbar('uniquenessRatio','disp',1,100,nothing)
    cv2.createTrackbar('speckleRange','disp',0,100,nothing)
    cv2.createTrackbar('speckleWindowSize','disp',3,25,nothing)
    
    # Creating an object of StereoBM algorithm
    stereo = cv2.StereoBM_create()

    img_left = cv2.imread(left_images_path)
    img_right = cv2.imread(right_images_path)

    img_size = (int(img_left.shape[1]/5), int(img_left.shape[0]/5))
    img_left = cv2.resize(img_left, img_size, interpolation=cv2.INTER_AREA)
    img_right = cv2.resize(img_right, img_size, interpolation=cv2.INTER_AREA)

    # convert images to grayscale for template matching
    imgR_gray = cv2.cvtColor(img_right, cv2.COLOR_BGR2GRAY)
    imgL_gray = cv2.cvtColor(img_left, cv2.COLOR_BGR2GRAY)

    while True:
        
        # Updating the parameters based on the trackbar positions
        numDisparities = cv2.getTrackbarPos('numDisparities','disp')*16
        numDisparities = 16 if numDisparities == 0 else numDisparities
        blockSize = cv2.getTrackbarPos('blockSize','disp')
        if blockSize % 2 == 0:
            blockSize += 1

        if blockSize < 5:
            blockSize = 5

        preFilterType = cv2.getTrackbarPos('preFilterType','disp')
        preFilterSize = cv2.getTrackbarPos('preFilterSize','disp')*2 + 5
        preFilterCap = cv2.getTrackbarPos('preFilterCap','disp')
        textureThreshold = cv2.getTrackbarPos('textureThreshold','disp')
        uniquenessRatio = cv2.getTrackbarPos('uniquenessRatio','disp')
        speckleRange = cv2.getTrackbarPos('speckleRange','disp')
        speckleWindowSize = cv2.getTrackbarPos('speckleWindowSize','disp')
        disp12MaxDiff = cv2.getTrackbarPos('disp12MaxDiff','disp')
        minDisparity = cv2.getTrackbarPos('minDisparity','disp')
            
        # Setting the updated parameters before computing disparity map
        stereo.setNumDisparities(numDisparities)
        stereo.setBlockSize(blockSize)
        stereo.setPreFilterType(preFilterType)
        stereo.setPreFilterSize(preFilterSize)
        stereo.setPreFilterCap(preFilterCap)
        stereo.setTextureThreshold(textureThreshold)
        stereo.setUniquenessRatio(uniquenessRatio)
        stereo.setSpeckleRange(speckleRange)
        stereo.setSpeckleWindowSize(speckleWindowSize)
        stereo.setDisp12MaxDiff(disp12MaxDiff)
        stereo.setMinDisparity(minDisparity)

        # Calculating disparity using the StereoBM algorithm
        disparity =  stereo.compute(imgL_gray, imgR_gray).astype(np.float32)

        # NOTE: Code returns a 16bit signed single channel image,
        # CV_16S containing a disparity map scaled by 16. Hence it 
        # is essential to convert it to CV_32F and scale it down 16 times.


        # Scaling down the disparity values and normalizing them 
        disparity = (disparity/16.0 - minDisparity)/numDisparities

        # Displaying the disparity map
        cv2.imshow("disp",disparity)
    
        # Close window using esc key
        if cv2.waitKey(1) == 27:
            return
   

if __name__ == "__main__":
    main()
 